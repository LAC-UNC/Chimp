package com.lac.petrinet.core;

import com.lac.petrinet.components.Dummy;
import com.lac.petrinet.configuration.providers.FakeConfigurationReader;
import com.lac.petrinet.exceptions.PetriNetException;
import com.lac.petrinet.netcommunicator.ProcessorHandler;
import com.lac.petrinet.netcommunicator.Transition;

public class Soul {

	static private Dispatcher dispatcher ;
	static private PetriNetMapper petriNet = PetriNetMapper.getInstance();
	// the objective of the ProcessorHandler here is just to create the instance with the parameters given.
	static private ProcessorHandler processor;
	
	
	public synchronized static void associate(String nameTransitionOutput, Class<? extends Dummy> clazz, String nameTransitionInput, 
			String...nameTransitions ) throws PetriNetException{
		Transition transtitionOutput = petriNet.getFiredTransition(nameTransitionOutput);
		Dummy dummy = (Dummy) createInstance(clazz);
		dummy.setTransition(transtitionOutput);
		Transition transitionInput = petriNet.getInformedTransition(nameTransitionInput);
		transitionInput.addDummy(dummy);
		for(String name : nameTransitions){
			transitionInput = petriNet.getInformedTransition(name);
			transitionInput.addDummy(dummy);
		}
		
	}
	
	//created to encapsulate the exceptions generated by the instantiation of the Dummy. Custom exception should be used and throw
	private static Object createInstance(Class<? extends Dummy> clazz) throws PetriNetException{
		Object instance = null;
		try{
			instance = clazz.getConstructor().newInstance();
		}catch(Exception e){
			throw new PetriNetException("Not able to create a Dummy instance", e);
		}
		return instance;
	}
	
	
	public static void starts(String configFilePath, int transitionQuantity) throws PetriNetException {
		//TODO: create start
		// first we read the PNML in order to create the trnasitions that we need
		petriNet.setConfigurationPNML(configFilePath);
		// then we need to create the configuration files for the virtual processor
		//TODO: create the files for ProcesadorVirtual.
		String newFilePath= ""; 
		// Then, create the processor handler with the path to the config files just created.  
		processor = ProcessorHandler.getInstance(newFilePath,transitionQuantity);
		dispatcher = new Dispatcher();
		new Thread(dispatcher).start();
	}
	
	public static void starts(FakeConfigurationReader reader, int transitionQuantity) throws PetriNetException {
		//TODO: create start
		// first we read the PNML in order to create the trnasitions that we need
		petriNet.setConfigurationFake(reader);
		// then we need to create the configuration files for the virtual processor
		//TODO: create the files for ProcesadorVirtual.
		String newFilePath= ""; 
		// Then, create the processor handler with the path to the config files just created.  
		processor = ProcessorHandler.getInstance(newFilePath,transitionQuantity);
		dispatcher = new Dispatcher();
		new Thread(dispatcher).start();
	}
	
}
